# Docker Compose for TeachAI RAG System
# Optimized for single-server deployment with resource constraints
version: '3.8'

services:
  # Main TeachAI Application (Frontend + Backend + Simplified RAG)
  teachai:
    build: 
      context: .
      dockerfile: Dockerfile
    image: teachai:latest
    container_name: teachai-app
    restart: unless-stopped
    
    # Resource limits for 8GB RAM constraint
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '3.5'
        reservations:
          memory: 2G
          cpus: '2.0'
    
    # Port mapping
    ports:
      - "3000:3000"  # Frontend
      - "3001:3001"  # Backend API
    
    # Environment configuration
    environment:
      NODE_ENV: production
      PORT: 3001
      WEB_PORT: 3000
      
      # Database
      MONGODB_URI: mongodb://mongodb:27017/teachai
      
      # AI Service
      DASHSCOPE_API_KEY: ${DASHSCOPE_API_KEY}
      QWEN_MODEL: ${QWEN_MODEL:-qwen-plus}
      AI_MAX_TOKENS: ${AI_MAX_TOKENS:-2000}
      AI_TEMPERATURE: ${AI_TEMPERATURE:-0.7}
      
      # Simplified RAG Configuration  
      RAG_DB_TYPE: sqlite-vss
      RAG_SQLITE_PATH: /app/data/vectors.db
      RAG_DATA_DIR: /app/server/rag_data/chunks
      RAG_BACKUP_DIR: /app/backups
      EMBEDDING_PROFILE: ${EMBEDDING_PROFILE:-balanced}
      
      # Resource optimization
      NODE_OPTIONS: --max-old-space-size=4096
      UV_THREADPOOL_SIZE: 4
      
      # Security
      JWT_SECRET: ${JWT_SECRET}
      
      # Optional: ChromaDB Cloud fallback
      CHROMA_CLOUD_ENABLED: ${CHROMA_CLOUD_ENABLED:-false}
      CHROMADB_API_KEY: ${CHROMADB_API_KEY}
      CHROMADB_TENANT: ${CHROMADB_TENANT}
      CHROMADB_DATABASE: ${CHROMADB_DATABASE:-teachai}
    
    # Volume mounts for data persistence
    volumes:
      - teachai_data:/app/data
      - teachai_logs:/app/logs
      - teachai_models:/app/models
      - teachai_backups:/app/backups
      # Mount RAG data if available locally
      - ${RAG_DATA_PATH:-./server/rag_data}:/app/server/rag_data:ro
    
    # Health check
    healthcheck:
      test: ["CMD", "./docker/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    # Dependencies
    depends_on:
      mongodb:
        condition: service_healthy
    
    # Network
    networks:
      - teachai-network

  # MongoDB Database
  mongodb:
    image: mongo:6.0-focal
    container_name: teachai-mongodb
    restart: unless-stopped
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.2'
    
    # Environment
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: teachai
    
    # Volume for data persistence
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
      - ./docker/mongo-init.js:/docker-entrypoint-initdb.d/init.js:ro
    
    # Port (not exposed by default for security)
    # ports:
    #   - "27017:27017"
    
    # Health check
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    
    # Network
    networks:
      - teachai-network

  # Optional: Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: teachai-nginx
    restart: unless-stopped
    profiles:
      - production
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.2'
    
    # Port mapping
    ports:
      - "80:80"
      - "443:443"
    
    # Configuration
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - teachai_logs:/var/log/nginx
    
    # Dependencies
    depends_on:
      - teachai
    
    # Network
    networks:
      - teachai-network

  # Optional: Monitoring with lightweight setup
  monitoring:
    image: prom/node-exporter:latest
    container_name: teachai-monitoring
    restart: unless-stopped
    profiles:
      - monitoring
    
    # Resource limits
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'
    
    # Host metrics
    pid: host
    network_mode: host
    
    # Volumes
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    
    # Command
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

# Named volumes for data persistence
volumes:
  teachai_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./docker-data}/teachai_data
  
  teachai_logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./docker-data}/teachai_logs
  
  teachai_models:
    driver: local
    driver_opts:
      type: none  
      o: bind
      device: ${DATA_PATH:-./docker-data}/teachai_models
  
  teachai_backups:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./docker-data}/teachai_backups
  
  mongodb_data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./docker-data}/mongodb_data
  
  mongodb_config:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ${DATA_PATH:-./docker-data}/mongodb_config

# Network configuration
networks:
  teachai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16 