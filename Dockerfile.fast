# Fast-build Dockerfile for TeachAI RAG System
# Optimized for quick builds with minimal dependencies

FROM node:18-alpine AS base
LABEL maintainer="TeachAI Team"
LABEL description="TeachAI fast build - minimal dependencies"

# Install only essential system dependencies
RUN apk update && apk add --no-cache \
    sqlite \
    curl \
    && rm -rf /var/cache/apk/*

# Install pnpm
RUN npm install -g pnpm@8

WORKDIR /app

# Copy package files first for better caching
COPY pnpm-workspace.yaml package.json pnpm-lock.yaml ./
COPY web/package.json ./web/package.json
COPY server/package.json ./server/package.json

# Install dependencies (no native compilation)
RUN pnpm install --frozen-lockfile --prod || pnpm install --force --prod

# Build frontend
COPY web ./web
WORKDIR /app/web
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
RUN pnpm build

# Back to root and copy server
WORKDIR /app
COPY server ./server

# Create non-root user
RUN addgroup -g 1001 -S teachai && \
    adduser -S teachai -u 1001

# Create directories and set permissions
RUN mkdir -p /app/data /app/logs /app/models /app/backups /app/server/simple-rag/data && \
    chown -R teachai:teachai /app

# Copy Docker support files
COPY docker ./docker
RUN chmod +x ./docker/*.sh

# Environment variables
ENV NODE_ENV=production
ENV PORT=3001
ENV WEB_PORT=3000
ENV RAG_DB_TYPE=sqlite-vss
ENV RAG_SQLITE_PATH=/app/data/vectors.db
ENV NODE_OPTIONS="--max-old-space-size=4096"

# Switch to non-root user
USER teachai

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD ./docker/healthcheck.sh quick

# Expose ports
EXPOSE 3000 3001

# Start application
ENTRYPOINT ["./docker/entrypoint.sh"]
CMD ["start"]