apiVersion: zeabur.com/v1
kind: Template
metadata:
  name: ai-lesson-plan-generator
  description: "AI-Powered Lesson Plan Generator with RAG System"
  author: "LQ458"
  tags:
    - education
    - ai
    - nextjs
    - mongodb
    - chromadb
    - rag
  icon: "ðŸŽ“"
  readme: |
    # AI Lesson Plan Generator

    Complete AI-powered lesson plan generator with:
    - Next.js 15 frontend with React 19
    - Node.js Express backend  
    - MongoDB for user data
    - ChromaDB for RAG vector search
    - 95,360+ educational materials
    - Direct streaming from Chinese AI providers (Qwen)

    ## Features
    - 60-75% faster AI responses via direct streaming
    - Comprehensive educational content database
    - Multi-grade and multi-subject support
    - Real-time lesson plan generation
    - Exercise generation and export

spec:
  services:
    - name: mongodb
      template: PREBUILT
      spec:
        image: mongo:7.0
        ports:
          - 27017
        volumes:
          - name: mongodb-data
            mountPath: /data/db
        environment:
          - key: MONGO_INITDB_ROOT_USERNAME
            value: admin
          - key: MONGO_INITDB_ROOT_PASSWORD
            value: ${MONGO_PASSWORD}
          - key: MONGO_INITDB_DATABASE
            value: teachai
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.5"
          limits:
            memory: "1Gi" 
            cpu: "1"

    - name: chromadb
      template: PREBUILT
      spec:
        image: ghcr.io/chroma-core/chroma:latest
        ports:
          - 8000
        volumes:
          - name: chromadb-data
            mountPath: /chroma/chroma
        environment:
          - key: IS_PERSISTENT
            value: "TRUE"
          - key: ALLOW_RESET
            value: "TRUE"
          - key: ANONYMIZED_TELEMETRY
            value: "FALSE"
          - key: CHROMA_SERVER_HOST
            value: "0.0.0.0"
          - key: CHROMA_SERVER_HTTP_PORT
            value: "8000"
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
          limits:
            memory: "2Gi"
            cpu: "1"
        healthCheck:
          httpGet:
            path: /api/v1/heartbeat
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10

    - name: teachai-backend
      template: GIT
      spec:
        source:
          git: https://github.com/LQ458/lesson-plan-generator
          branch: web
          path: ./server
        buildCommand: "pnpm install --frozen-lockfile"
        startCommand: "node server.js"
        ports:
          - 3001
        environment:
          - key: NODE_ENV
            value: production
          - key: PORT
            value: "3001"
          - key: MONGODB_URI
            value: mongodb://admin:${MONGO_PASSWORD}@mongodb:27017/teachai?authSource=admin
          - key: CHROMA_HOST
            value: chromadb
          - key: CHROMA_PORT
            value: "8000"
          - key: DASHSCOPE_API_KEY
            value: ${DASHSCOPE_API_KEY}
          - key: JWT_SECRET
            value: ${JWT_SECRET}
          - key: QWEN_MODEL
            value: qwen-plus
          - key: AI_MAX_TOKENS
            value: "2000"
          - key: AI_TEMPERATURE
            value: "0.7"
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.5"
          limits:
            memory: "1Gi"
            cpu: "1"
        depends_on:
          - mongodb
          - chromadb
        healthCheck:
          httpGet:
            path: /api/health
            port: 3001
          initialDelaySeconds: 60
          periodSeconds: 30

    - name: teachai-frontend
      template: GIT
      spec:
        source:
          git: https://github.com/LQ458/lesson-plan-generator
          branch: web
          path: ./web
        buildCommand: "pnpm install --frozen-lockfile && pnpm build"
        startCommand: "pnpm start"
        ports:
          - 3000
        environment:
          - key: NODE_ENV
            value: production
          - key: PORT
            value: "3000"
          - key: NEXT_PUBLIC_API_URL
            value: https://${ZEABUR_WEB_URL}/api
          - key: NEXT_TELEMETRY_DISABLED
            value: "1"
        resources:
          requests:
            memory: "512Mi"
            cpu: "0.5"
          limits:
            memory: "1Gi"
            cpu: "1"
        depends_on:
          - teachai-backend

  variables:
    - key: MONGO_PASSWORD
      name: MongoDB Password
      type: PASSWORD
      description: "Password for MongoDB root user"
      
    - key: DASHSCOPE_API_KEY
      name: Qwen API Key
      type: SECRET
      description: "API key for Qwen/DashScope AI service"
      
    - key: JWT_SECRET
      name: JWT Secret
      type: SECRET
      description: "Secret key for JWT token generation"

  instructions: |
    ## Deployment Instructions

    ### 1. Required Environment Variables
    Before deploying, you need to set:
    - `DASHSCOPE_API_KEY`: Get from https://dashscope.aliyun.com/
    - `JWT_SECRET`: Generate a secure random string
    - `MONGO_PASSWORD`: Will be auto-generated

    ### 2. Post-Deployment Setup
    After successful deployment:

    1. **Load Educational Data**:
       ```bash
       # Access backend service terminal
       curl -X POST https://your-backend-url/api/admin/load-rag-data
       ```

    2. **Verify Services**:
       - Frontend: https://your-frontend-url
       - Backend API: https://your-backend-url/api/health
       - MongoDB: Available via internal network
       - ChromaDB: Available via internal network

    ### 3. Service Architecture
    ```
    Frontend (Next.js) â†’ Backend (Node.js) â†’ MongoDB + ChromaDB
                                          â†“
                                   95,360+ Educational Chunks
    ```

    ### 4. Expected Performance
    - Initial load: ~2-3 minutes
    - RAG data loading: ~5-10 minutes
    - AI response time: 3-5 seconds (60-75% faster)

    ### 5. Monitoring
    - Check logs in Zeabur dashboard
    - Monitor resource usage
    - Health checks run automatically

  tags:
    - ai
    - education  
    - nextjs
    - nodejs
    - mongodb
    - chromadb
    - rag