#!/usr/bin/env node

/**
 * Comprehensive Verification of Real Educational Data
 * This verifies the RAG system returns actual textbook content, not mock data
 */

async function verifyRealEducationalData() {
    console.log('üî¨ Comprehensive Verification of Real Educational Data');
    console.log('===================================================\n');

    console.log('üìä Step 1: Verify Local RAG Data is Real Educational Content');
    console.log('-----------------------------------------------------------');

    const fs = require('fs');
    const path = require('path');
    
    // Check local RAG data
    const ragDataPath = path.join(__dirname, 'server', 'rag_data', 'chunks');
    const files = fs.readdirSync(ragDataPath).filter(f => f.endsWith('.json')).slice(0, 5);
    
    let realContentVerified = 0;
    
    for (const filename of files) {
        const filePath = path.join(ragDataPath, filename);
        const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        
        // Get first chunk
        const sample = data[0];
        const content = sample.content || '';
        
        console.log(`üìÅ File: ${filename.substring(0, 50)}...`);
        console.log(`üìÑ Content preview: ${content.substring(0, 150)}...`);
        
        // Verify this is real educational content by checking for:
        // 1. Chinese educational terminology
        // 2. Mathematical expressions or academic content
        // 3. Educational structure (exercises, questions, etc.)
        
        const educationalMarkers = [
            '‰πâÂä°ÊïôËÇ≤', 'Âπ¥Á∫ß', '‰∏äÂÜå', '‰∏ãÂÜå', 'ÊïôÁßë‰π¶', 'ÁªÉ‰π†', '‰π†È¢ò', 'ËØæ',
            'ÂçïÂÖÉ', 'Â§ç‰π†', 'ËÄÉËØï', 'Â≠¶‰π†', 'ÊïôÂ≠¶', 'Â≠¶Áîü', 'ËÄÅÂ∏à', '‰Ωú‰∏ö'
        ];
        
        const mathematicalMarkers = [
            '=', '+', '-', '√ó', '√∑', 'Ôºà', 'Ôºâ', 'Êï∞Â≠¶', 'ËÆ°ÁÆó', 'ÂÖ¨Âºè',
            'È¢òÁõÆ', 'Ëß£Á≠î', 'ËØÅÊòé', 'ÂÆöÁêÜ'
        ];
        
        const hasEducationalTerms = educationalMarkers.some(marker => content.includes(marker));
        const hasMathematicalContent = mathematicalMarkers.some(marker => content.includes(marker));
        const hasChineseContent = /[\u4e00-\u9fff]/.test(content);
        const hasStructuredContent = content.length > 100; // Not just mock snippets
        
        console.log(`   ‚úÖ Chinese educational terms: ${hasEducationalTerms ? 'Yes' : 'No'}`);
        console.log(`   ‚úÖ Mathematical/Academic content: ${hasMathematicalContent ? 'Yes' : 'No'}`);
        console.log(`   ‚úÖ Chinese language content: ${hasChineseContent ? 'Yes' : 'No'}`);
        console.log(`   ‚úÖ Structured content (>100 chars): ${hasStructuredContent ? 'Yes' : 'No'}`);
        
        if (hasEducationalTerms && hasChineseContent && hasStructuredContent) {
            realContentVerified++;
            console.log(`   üéâ VERIFIED: This is real educational content!`);
        } else {
            console.log(`   ‚ö†Ô∏è  QUESTIONABLE: May not be real educational content`);
        }
        
        console.log();
    }
    
    const realContentRate = (realContentVerified / files.length) * 100;
    console.log(`üìä Real Content Verification: ${realContentVerified}/${files.length} files verified as real educational content (${realContentRate}%)\n`);

    console.log('üìã Step 2: Analyze Content Quality and Educational Value');
    console.log('-----------------------------------------------------');
    
    // Analyze a few more files for educational value
    let totalQualityScore = 0;
    let educationalValueCount = 0;
    
    for (let i = 0; i < Math.min(files.length, 3); i++) {
        const filename = files[i];
        const filePath = path.join(ragDataPath, filename);
        const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        
        console.log(`\nüìö Analyzing: ${filename.substring(0, 40)}...`);
        console.log(`   üìä Total chunks in file: ${data.length}`);
        
        // Analyze multiple chunks for variety
        let fileQuality = 0;
        let validChunks = 0;
        
        for (let j = 0; j < Math.min(data.length, 3); j++) {
            const chunk = data[j];
            const content = chunk.content || '';
            const quality = chunk.metadata?.quality_score || 0.8;
            
            fileQuality += quality;
            validChunks++;
            
            // Check for specific educational patterns
            const hasExercises = /[0-9]+\..*?[Ôºü?]/.test(content) || content.includes('ÁªÉ‰π†') || content.includes('È¢òÁõÆ');
            const hasInstructions = content.includes('Ëß£Á≠î') || content.includes('ËÆ°ÁÆó') || content.includes('ËØ¥Êòé');
            const hasFormulas = /[0-9]+\s*[+\-√ó√∑=]\s*[0-9]/.test(content);
            const hasEducationalStructure = content.includes('ÂçïÂÖÉ') || content.includes('Á´†ËäÇ') || content.includes('ËØæÊó∂');
            
            console.log(`   üìÑ Chunk ${j+1}: Quality ${(quality*100).toFixed(1)}%, Length ${content.length} chars`);
            if (hasExercises) console.log(`      ‚úÖ Contains exercises/questions`);
            if (hasInstructions) console.log(`      ‚úÖ Contains educational instructions`);
            if (hasFormulas) console.log(`      ‚úÖ Contains mathematical formulas`);
            if (hasEducationalStructure) console.log(`      ‚úÖ Has educational structure`);
        }
        
        const avgQuality = fileQuality / validChunks;
        totalQualityScore += avgQuality;
        
        if (avgQuality > 0.7) {
            educationalValueCount++;
        }
        
        console.log(`   üèÜ File average quality: ${(avgQuality*100).toFixed(1)}%`);
    }
    
    const avgQualityOverall = (totalQualityScore / Math.min(files.length, 3)) * 100;
    const educationalValueRate = (educationalValueCount / Math.min(files.length, 3)) * 100;
    
    console.log(`\nüìà Overall Quality Analysis:`);
    console.log(`   üèÜ Average quality score: ${avgQualityOverall.toFixed(1)}%`);
    console.log(`   üéì High educational value: ${educationalValueCount}/${Math.min(files.length, 3)} files (${educationalValueRate.toFixed(1)}%)`);

    console.log('\nüìù Step 3: Verify Content Authenticity Markers');
    console.log('--------------------------------------------');
    
    // Check for authentic Chinese textbook markers
    let authenticityMarkers = 0;
    const authenticationTests = files.slice(0, 3);
    
    for (const filename of authenticationTests) {
        const filePath = path.join(ragDataPath, filename);
        const data = JSON.parse(fs.readFileSync(filePath, 'utf8'));
        
        const sampleContent = data.slice(0, 5).map(d => d.content).join(' ');
        
        // Check for authentic Chinese textbook markers
        const hasPublisherInfo = sampleContent.includes('‰∫∫Ê∞ëÊïôËÇ≤Âá∫ÁâàÁ§æ') || sampleContent.includes('ÊïôËÇ≤ÈÉ®');
        const hasCurriculumStructure = sampleContent.includes('‰πâÂä°ÊïôËÇ≤') && sampleContent.includes('ÊïôÁßë‰π¶');
        const hasGradeIndicators = /[‰∏Ä‰∫å‰∏âÂõõ‰∫îÂÖ≠‰∏ÉÂÖ´‰πù]+Âπ¥Á∫ß/.test(sampleContent);
        const hasChapterStructure = sampleContent.includes('ÂçïÂÖÉ') || sampleContent.includes('Á´†') || /Á¨¨.{1,3}ËØæ/.test(sampleContent);
        const hasEducationalLanguage = sampleContent.includes('Â≠¶‰π†ÁõÆÊ†á') || sampleContent.includes('ÈáçÁÇπ') || sampleContent.includes('ÈöæÁÇπ');
        
        console.log(`üìñ ${filename.substring(0, 30)}...`);
        console.log(`   ‚úÖ Publisher markers: ${hasPublisherInfo ? 'Found' : 'Not found'}`);
        console.log(`   ‚úÖ Curriculum structure: ${hasCurriculumStructure ? 'Found' : 'Not found'}`);
        console.log(`   ‚úÖ Grade indicators: ${hasGradeIndicators ? 'Found' : 'Not found'}`);
        console.log(`   ‚úÖ Chapter structure: ${hasChapterStructure ? 'Found' : 'Not found'}`);
        
        if (hasCurriculumStructure && hasGradeIndicators) {
            authenticityMarkers++;
            console.log(`   üèÜ AUTHENTIC: Shows genuine textbook characteristics`);
        } else {
            console.log(`   ‚ö†Ô∏è  UNCERTAIN: May not be authentic textbook content`);
        }
        console.log();
    }
    
    const authenticityRate = (authenticityMarkers / authenticationTests.length) * 100;

    console.log('üéØ FINAL VERIFICATION RESULTS');
    console.log('=============================');
    console.log(`üìö Real educational content: ${realContentRate.toFixed(1)}% verified`);
    console.log(`üèÜ Average content quality: ${avgQualityOverall.toFixed(1)}%`);
    console.log(`üéì High educational value: ${educationalValueRate.toFixed(1)}%`);
    console.log(`üìñ Authentic textbook markers: ${authenticityRate.toFixed(1)}%`);
    
    console.log('\nüé™ AUTHENTICITY ASSESSMENT:');
    
    if (realContentRate >= 80 && avgQualityOverall >= 70 && authenticityRate >= 60) {
        console.log('üéâ VERIFIED: This is REAL educational content from authentic Chinese textbooks!');
        console.log('‚úÖ Content shows genuine educational structure, terminology, and quality');
        console.log('‚úÖ NOT mock data - contains actual curriculum materials');
        console.log('‚úÖ Suitable for lesson plan generation and educational AI applications');
        return true;
    } else if (realContentRate >= 60 && avgQualityOverall >= 60) {
        console.log('‚ö†Ô∏è  MOSTLY REAL: Content appears to be largely authentic educational material');
        console.log('‚úÖ Suitable for educational use but may have some quality variations');
        return true;
    } else {
        console.log('‚ùå QUESTIONABLE: Content authenticity could not be fully verified');
        console.log('‚ö†Ô∏è  May contain mock data or low-quality educational materials');
        return false;
    }
}

verifyRealEducationalData().catch(console.error);